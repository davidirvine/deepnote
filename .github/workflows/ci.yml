name: CI/CD Pipeline

# Grant necessary permissions for GitHub Actions
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck
        
    - name: Run clang-format check
      run: |
        if [ -f .clang-format ]; then
          find src test -name "*.hpp" -o -name "*.cpp" | xargs clang-format --dry-run --Werror --style=file
        else
          echo "No .clang-format file found, skipping format check"
        fi
        
    - name: Run static analysis  
      run: |
        echo "Current directory: $(pwd)"
        echo "Running cppcheck..."
        if command -v cppcheck &> /dev/null; then
          if [ -d "src" ]; then
            echo "Found src/ directory, running cppcheck on header files..."
            find src/ -name "*.hpp" -o -name "*.cpp" | xargs cppcheck --enable=warning,style,performance,portability --inline-suppr --quiet --error-exitcode=0
          else
            echo "src/ directory not found, skipping cppcheck..."
          fi
        else
          echo "cppcheck not found, skipping..."
        fi

  # Build and test on multiple platforms
  build-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Debug, Release]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Configure CMake
      run: |
        cd test
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
        
    - name: Build
      run: |
        cd test/build
        cmake --build . --config ${{ matrix.build-type }}
        
    - name: Run tests
      run: |
        cd test/build
        ctest --output-on-failure --build-config ${{ matrix.build-type }}

  # Code coverage (Linux only)
  coverage:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'pull_request' && github.base_ref == 'develop')
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install coverage tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        
    - name: Build with coverage
      run: |
        cd test
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" ..
        cmake --build . --config Debug
        
    - name: Run tests with coverage
      run: |
        cd test/build
        ./bin/tests
        
    - name: Generate coverage report
      run: |
        cd test/build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info \
          '/usr/*' \
          '*/thirdparty/*' \
          '*/test/*' \
          '*_tests.cpp' \
          '*/doctest/*' \
          --output-file coverage.info \
          --ignore-errors unused
        lcov --list coverage.info
        
    - name: Coverage report comment
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.4.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: test/build/coverage.info
        
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/develop'
      run: |
        cd test/build
        COVERAGE=$(lcov --summary coverage.info 2>&1 | grep -E "lines.*:" | awk '{print $2}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        # Create badge URL
        BADGE_COLOR="red"
        if (( $(echo "$COVERAGE > 80" | bc -l) )); then BADGE_COLOR="green"; fi
        if (( $(echo "$COVERAGE > 60 && $COVERAGE <= 80" | bc -l) )); then BADGE_COLOR="yellow"; fi
        
        curl -o coverage-badge.svg "https://img.shields.io/badge/coverage-${COVERAGE}%25-${BADGE_COLOR}"
        
    - name: Upload coverage badge
      if: github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-badge
        path: test/build/coverage-badge.svg

  # Documentation generation
  documentation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      run: |
        cd docs/doxygen
        doxygen Doxyfile
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.PAT_TOKEN }}
        publish_dir: docs/doxygen/docs
        enable_jekyll: false
        force_orphan: true
        
    # Alternative using official GitHub Pages action:
    # - name: Setup Pages
    #   uses: actions/configure-pages@v3
    # - name: Upload artifact
    #   uses: actions/upload-pages-artifact@v2
    #   with:
    #     path: docs/doxygen/docs/html
    # - name: Deploy to GitHub Pages
    #   id: deployment
    #   uses: actions/deploy-pages@v2

  # Performance benchmarks
  benchmarks:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Build benchmarks
      run: |
        cd test
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-O3 -DNDEBUG" ..
        cmake --build . --config Release
        
    - name: Run performance tests
      run: |
        cd test/build
        # Add performance benchmark execution here
        echo "Performance benchmarks would run here"
